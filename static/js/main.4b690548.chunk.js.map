{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","types/SortCategories.ts","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","query","get","centuries","getAll","sex","className","classNames","type","placeholder","onChange","event","target","map","century","includes","filter","c","length","Loader","SortCategories","PersonLink","person","name","slug","pathname","PeopleTable","people","slugPerson","useParams","order","sort","iconSort","field","getPersonName","find","pers","setSearch","reselt","handleClick","onClick","Name","Sex","Born","Died","born","died","motherName","fatherName","mother","undefined","father","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","catch","finally","visiblePeople","useMemo","preparedPeople","toLowerCase","trim","Math","ceil","person1","person2","localeCompare","reverse","Navbar","getLinkClass","isActive","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4b690548.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || '';\n  const sex = searchParams.get('sex') || '';\n  const arrayCentury = ['16', '17', '18', '19', '20'];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const params = new URLSearchParams(searchParams);\n\n    params.set('query', event.target.value);\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p\n        className=\"panel-tabs\"\n        data-cy=\"SexFilter\"\n      >\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {arrayCentury.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuries.includes(century) },\n                )}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(c => c !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': !!centuries.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={classNames('button is-link is-fullwidth', {\n            'is-outlined': !!centuries.length || sex || query,\n          })}\n          params={{ sex: null, centuries: null, query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum SortCategories {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, slug, sex } = person;\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${slug}`,\n        search: searchParams.toString(),\n      }}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person, Params, SortCategories } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slugPerson } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const order = searchParams.get('order') || null;\n  const sort = searchParams.get('sort') || null;\n\n  function iconSort(field: SortCategories) {\n    if (sort === field && order !== 'desc') {\n      return (<i className=\"fas fa-sort-up\" />);\n    }\n\n    if (sort === field && order === 'desc') {\n      return (<i className=\"fas fa-sort-down\" />);\n    }\n\n    return <i className=\"fas fa-sort\" />;\n  }\n\n  function getPersonName(name: string) {\n    return people.find(pers => pers.name === name);\n  }\n\n  function setSearch(params: Params) {\n    const reselt = getSearchWith(searchParams, params);\n\n    setSearchParams(reselt);\n  }\n\n  function handleClick(field: SortCategories) {\n    if (sort !== field) {\n      setSearch({ sort: field, order: null });\n    } else if (sort === field && order) {\n      setSearch({ sort: null, order: null });\n    } else if (sort === field) {\n      setSearch({\n        order: 'desc',\n      });\n    }\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <span\n                aria-hidden=\"true\"\n                onClick={() => handleClick(SortCategories.Name)}\n                className=\"icon\"\n              >\n                {iconSort(SortCategories.Name)}\n              </span>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <span\n                aria-hidden=\"true\"\n                onClick={() => handleClick(SortCategories.Sex)}\n                className=\"icon\"\n              >\n                {iconSort(SortCategories.Sex)}\n\n              </span>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <span\n                aria-hidden=\"true\"\n                onClick={() => handleClick(SortCategories.Born)}\n                className=\"icon\"\n              >\n                {iconSort(SortCategories.Born)}\n\n              </span>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <span\n                aria-hidden=\"true\"\n                onClick={() => handleClick(SortCategories.Died)}\n                className=\"icon\"\n              >\n                {iconSort(SortCategories.Died)}\n\n              </span>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {people.map(({\n          sex, born, died, motherName, fatherName, slug, name,\n        }) => {\n          const mother = motherName\n            ? getPersonName(motherName) : undefined;\n          const father = fatherName\n            ? getPersonName(fatherName) : undefined;\n\n          return (\n            <tr\n              key={slug}\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': slug === slugPerson,\n              })}\n            >\n              <td>\n                <PersonLink person={({\n                  sex, born, died, motherName, fatherName, slug, name,\n                })}\n                />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother\n                  ? (\n                    <PersonLink person={mother} />\n                  )\n                  : motherName || (<span>-</span>)}\n              </td>\n              <td>\n                {father\n                  ? (\n                    <PersonLink person={father} />\n                  )\n                  : fatherName || (<span>-</span>)}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useMemo, useState } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person, SortCategories } from '../types';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState <Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || '';\n  const sex = searchParams.get('sex') || '';\n  const order = searchParams.get('order') || null;\n  const sort = searchParams.get('sort') || null;\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visiblePeople = useMemo(() => {\n    let preparedPeople = people;\n\n    if (query) {\n      preparedPeople = preparedPeople.filter(\n        person => person.name.toLowerCase().includes(query.toLowerCase().trim())\n        || person.motherName?.toLowerCase().includes(query.toLowerCase().trim())\n        || person.fatherName?.toLowerCase()\n          .includes(query.toLowerCase().trim()),\n      );\n    }\n\n    if (centuries.length > 0) {\n      preparedPeople = preparedPeople.filter(person => (\n        centuries.includes(Math.ceil(person.born / 100).toString())\n      ));\n    }\n\n    if (sex) {\n      preparedPeople = preparedPeople.filter(person => (\n        person.sex === sex\n      ));\n    }\n\n    if (sort) {\n      preparedPeople = [...preparedPeople].sort((person1, person2) => {\n        switch (sort) {\n          case SortCategories.Name:\n          case SortCategories.Sex:\n            return person1[sort].localeCompare(person2[sort]);\n            break;\n          case SortCategories.Born:\n          case SortCategories.Died:\n            return person2[sort] - person1[sort];\n            break;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      preparedPeople.reverse();\n    }\n\n    return preparedPeople;\n  }, [people, query, centuries, sex, sort, order]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {!people.length ? (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )\n                : <PeopleTable people={visiblePeople} />}\n            </div>\n            {!visiblePeople.length && (\n              <p>\n                There are no people matching the current search\n                criteria\n              </p>\n            )}\n            {!isLoading && isError && (\n              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                Something went wrong\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const getLinkClass = ({ isActive }:{ isActive: boolean }) => classNames(\n    'navbar-item', {\n      'has-background-grey-lighter': isActive,\n    },\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slugPerson\" element={<PeoplePage />} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}